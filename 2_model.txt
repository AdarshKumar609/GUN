<!DOCTYPE html>
<html lang="en">
<head>
    <title>3D Model in AR</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <link type="text/css" rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r126/three.js" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/three@0.126.0/examples/js/loaders/OBJLoader.js"></script>
</head>
<body>
    <script type="module">
        import { ARButton } from 'https://unpkg.com/three@0.126.0/examples/jsm/webxr/ARButton.js';

        let camera, scene, renderer;
        let controller;

        init();
        animate();

        function init() {
            const container = document.createElement('div');
            document.body.appendChild(container);

            scene = new THREE.Scene();

            camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 40);

            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.xr.enabled = true;
            container.appendChild(renderer.domElement);

            const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);
            light.position.set(0.5, 1, 0.25);
            scene.add(light);

            const modelUrl = 'https://raw.githubusercontent.com/AdarshKumar609/GUN/main/M4A1.obj';

            const loader = new THREE.OBJLoader();
            loader.load(
                modelUrl,
                function (object) {
                    object.scale.set(0.5, 0.5, 0.5);

                    // Create an anchor and add the object to the anchor
                    const anchor = new THREE.Group();
                    anchor.add(object);
                    anchor.position.set(0, 0, -2); // Set anchor position in front of the camera
                    scene.add(anchor);

                    renderer.xr.getSession().requestReferenceSpace('local').then((referenceSpace) => {
                        renderer.xr.getSession().requestHitTestSource({ space: referenceSpace }).then((hitTestSource) => {
                            hitTestSource.update = (frame, referenceSpace) => {
                                const hitTestResults = frame.getHitTestResults(hitTestSource);
                                if (hitTestResults.length > 0) {
                                    const hit = hitTestResults[0];
                                    const pose = hit.getPose(referenceSpace);
                                    anchor.position.copy(pose.transform.position);
                                    anchor.quaternion.copy(pose.transform.orientation);
                                }
                            };
                        });
                    });

                    console.log("Model added to scene with scale", object.scale);
                },
                function (xhr) {
                    console.log((xhr.loaded / xhr.total * 100) + '% loaded');
                },
                function (error) {
                    console.error('An error occurred:', error);
                }
            );

            document.body.appendChild(ARButton.createButton(renderer));

            window.addEventListener('resize', onWindowResize, false);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function animate() {
            renderer.setAnimationLoop(render);
        }

        function render() {
            renderer.render(scene, camera);
        }
    </script>
</body>
</html>
